// <auto-generated />
using System;
using FantasyStockTrader.Core.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyStockTrader.Core.Migrations
{
    [DbContext(typeof(FantasyStockTraderContext))]
    [Migration("20250129032007_AddsSeedData")]
    partial class AddsSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("FantasyStockTrader.Core.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique()
                        .HasDatabaseName("UXC_Account_EmailAddress");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb0e7bd5-df42-46cc-bbe7-7ecb8d8718d9"),
                            CreatedAt = new DateTime(2025, 1, 29, 0, 0, 34, 0, DateTimeKind.Unspecified),
                            EmailAddress = "andy@email.com",
                            FirstName = "Andy",
                            LastName = "Sterkowitz",
                            Password = "$2b$10$JKnwr5mA2ux4iN1RXbAVC.92tIwUrjmxiOZfG1DDK/GOtwkPl/7p6"
                        });
                });

            modelBuilder.Entity("FantasyStockTrader.Core.ExternalApiCall", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCached")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("ExternalApiCalls");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Holding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<double>("CostBasis")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Shares")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Holdings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c38133e9-d75c-42d6-a537-36d458c96cd9"),
                            AccountId = new Guid("eb0e7bd5-df42-46cc-bbe7-7ecb8d8718d9"),
                            CostBasis = 39809.0,
                            CreatedAt = new DateTime(2025, 1, 29, 0, 2, 54, 0, DateTimeKind.Unspecified),
                            Shares = 100,
                            Symbol = "TSLA"
                        });
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasDatabaseName("UXC_Session_RefreshToken");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("781073a5-3f84-46c6-a3c1-5fb21568525e"),
                            AccountId = new Guid("eb0e7bd5-df42-46cc-bbe7-7ecb8d8718d9"),
                            Amount = 100,
                            CreatedAt = new DateTime(2025, 1, 29, 0, 2, 54, 0, DateTimeKind.Unspecified),
                            Price = 398.08999999999997,
                            Symbol = "TSLA",
                            Type = "BUY"
                        });
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("579bb084-88cf-438b-85a1-b0822b731f32"),
                            AccountId = new Guid("eb0e7bd5-df42-46cc-bbe7-7ecb8d8718d9"),
                            Amount = 60191m
                        });
                });

            modelBuilder.Entity("FantasyStockTrader.Core.ExternalApiCall", b =>
                {
                    b.HasOne("FantasyStockTrader.Core.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Holding", b =>
                {
                    b.HasOne("FantasyStockTrader.Core.Account", "Account")
                        .WithMany("Holdings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Session", b =>
                {
                    b.HasOne("FantasyStockTrader.Core.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Wallet", b =>
                {
                    b.HasOne("FantasyStockTrader.Core.Account", "Account")
                        .WithOne()
                        .HasForeignKey("FantasyStockTrader.Core.Wallet", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FantasyStockTrader.Core.Account", b =>
                {
                    b.Navigation("Holdings");
                });
#pragma warning restore 612, 618
        }
    }
}
